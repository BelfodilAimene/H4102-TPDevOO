package application;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

interface Command {
	boolean execute();

	boolean unexecute();
}

class AjoutLivraisonCommand implements Command {

	FeuilleDeRoute feuilleDeRoute;
	Noeud avant;
	Noeud noeud;

	public AjoutLivraisonCommand(FeuilleDeRoute feuilleDeRoute, Noeud avant,
			Noeud noeud) {
		super();
		this.feuilleDeRoute = feuilleDeRoute;
		this.avant = avant;
		this.noeud = noeud;
	}

	@Override
	public boolean execute() {
		return feuilleDeRoute.majItineraireAjoutLivraison(avant, noeud);
	}

	@Override
	public boolean unexecute() {
		return feuilleDeRoute.majItineraireSupressionLivraison(noeud);
	}
}

class SuppressionLivraisonCommand implements Command {

	FeuilleDeRoute feuilleDeRoute;
	Noeud noeud;
	Noeud avant = null;

	public SuppressionLivraisonCommand(FeuilleDeRoute feuilleDeRoute,
			Noeud avant, Noeud noeud) {
		super();
		this.feuilleDeRoute = feuilleDeRoute;
		this.noeud = noeud;
	}

	@Override
	public boolean execute() {
		int ordre = feuilleDeRoute.getOrdreCheminDeNoeudDepart(noeud);
		avant = feuilleDeRoute.getItineraire().get(ordre - 1).getDepart();
		return feuilleDeRoute.majItineraireSupressionLivraison(noeud);
	}

	@Override
	public boolean unexecute() {
		return feuilleDeRoute.majItineraireAjoutLivraison(avant, noeud);
	}
}

class Modificator {
	private List<Command> history = new ArrayList<Command>();
	int actuel = -1;

	public Modificator() {
	}

	public void storeAndExecute(Command cmd) {
		int l=actuel+1;
		while (l<=history.size()) {
			history.remove(l);
		}
		
		if (cmd.execute()) {
			this.history.add(cmd);
			actuel+=1;	
		}
	}

	public void undo() {
		this.history.get(actuel).unexecute();
		actuel--;
	}

	public void redo() {
		actuel++;
		this.history.get(actuel).execute();
	}
}

/**
 * Classe de test
 * 
 * @author H4102
 *
 */

public class Test {

	public static void main(String args[]) {

		// EXEMPLE PLAN --------------------------- Noeud noeud1=new
		Noeud noeud1 = new Noeud(1, 100, 100);
		Noeud noeud2 = new Noeud(2, 50, 150);
		Noeud noeud3 = new Noeud(3, 150, 150);
		Noeud noeud4 = new Noeud(4, 150, 200);
		Noeud noeud5 = new Noeud(5, 50, 200);
		Noeud noeud6 = new Noeud(6, 100, 300);

		ArrayList<Noeud> noeuds = new ArrayList<>();
		noeuds.add(noeud1);
		noeuds.add(noeud2);
		noeuds.add(noeud3);
		noeuds.add(noeud4);
		noeuds.add(noeud5);
		noeuds.add(noeud6);

		Troncon troncon1 = new Troncon("r1", 30, 40, noeud1, noeud2);
		Troncon troncon2 = new Troncon("r1", 30, 300, noeud1, noeud3);
		Troncon troncon3 = new Troncon("r1", 30, 30, noeud2, noeud3);
		Troncon troncon4 = new Troncon("r1", 30, 40, noeud3, noeud4);
		Troncon troncon5 = new Troncon("r1", 30, 40, noeud4, noeud2);
		Troncon troncon6 = new Troncon("r1", 30, 40, noeud2, noeud5);
		Troncon troncon7 = new Troncon("r1", 30, 40, noeud5, noeud4);
		Troncon troncon8 = new Troncon("r1", 30, 40, noeud5, noeud6);
		Troncon troncon9 = new Troncon("r1", 30, 40, noeud4, noeud6);
		Troncon troncon10 = new Troncon("r1", 30, 40, noeud6, noeud1);

		Zone zone = new Zone("aymen.xml", noeuds);

		// -------------------------------------- // LIVRAISON Livraison
		Livraison livraison1 = new Livraison(1, noeud3);
		Livraison livraison2 = new Livraison(2, noeud5);

		PlageHoraire plageHoraire = new PlageHoraire(new Temps("8:0:0"),
				new Temps("11:0:0"));
		plageHoraire.addLivraison(livraison1);
		plageHoraire.addLivraison(livraison2);

		ArrayList<PlageHoraire> listePlagesHoraire = new ArrayList<>();
		listePlagesHoraire.add(plageHoraire);

		FeuilleDeRoute feuilleDeRoute = new FeuilleDeRoute(zone, 1,
				listePlagesHoraire);

		// --------------------------------------------------------------
		feuilleDeRoute.calculerItineraire();
		System.out.println(feuilleDeRoute.getStringItiniraire());
		/*
		 * feuilleDeRoute.majItineraireAjoutLivraison(zone.getNoeuds().get(5),
		 * zone.getNoeuds().get(2)); feuilleDeRoute.AfficherItiniraire();
		 * 
		 * feuilleDeRoute
		 * .majItineraireSupressionLivraison(zone.getNoeuds().get(2));
		 * feuilleDeRoute.AfficherItiniraire();
		 */
		// ----------------------------------------------------------------

		/*
		 * Zone zone = PlanManager.chargerZone("plan20x20.xml"); FeuilleDeRoute
		 * feuilleDeRoute = LivraisonManager.chargerLivraisons(
		 * "livraison20x20-2.xml", zone); System.out.println("State : " +
		 * feuilleDeRoute.calculerItineraire());
		 * feuilleDeRoute.editerFeuilleDeRoute("C:\\aymen.txt");*
		 */
	}

}
