package application;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

/**
 * Classe représentant une zone (réseau de noeuds)
 * @author H4102
 *
 */
public class Zone {
	/**
	 * nom du fichier XML de la zone
	 */
	private String nomFichier;
	/**
	 * Dictionnaire de noeuds (par identifiant)
	 */
	private HashMap<Integer, Noeud> noeuds ;
	
	
	
	
	/**
	 * construit une zone
	 * @param nomFichier nom du fichier XML de la zone
	 * @param noeuds Dictionnaire des noeuds (par identifiant)
	 */
	public Zone(String nomFichier,HashMap<Integer,Noeud> noeuds) {
		super();
		this.nomFichier = nomFichier;
		this.noeuds = noeuds;
	}
	
	/**
	 * construit une zone en utilisant une liste de noeuds
	 * @param nomFichier nom du fichier XML de la zone
	 * @param noeuds liste des noeuds
	 */
	public Zone(String nomFichier,ArrayList<Noeud> noeuds) {
		super();
		this.nomFichier = nomFichier;
		this.noeuds=new HashMap<>();
		this.addAllNoeud(noeuds);
	}
	/**
	 * 
	 * @return nom du fichier XML de la zone
	 */
	public String getNomFichier() {
		return nomFichier;
	}
	
	
	/**
	 * 
	 * @return Dictionnaire des noeuds (par identifiant)
	 */
	public HashMap<Integer, Noeud> getNoeuds() {
		return noeuds;
	}
	
	/**
	 * 
	 * @param noeud noeud a ajouter dans le dictionnaire
	 */
	public void addNoeud(Noeud noeud) {
		noeuds.put(noeud.getId(),noeud);
	}
	
	public void addAllNoeud(ArrayList<Noeud> noeuds) {
		for (Noeud noeud : noeuds) {
			addNoeud(noeud);
		}
	}
	
	
	public int getMinX() {
		int MinX=Integer.MAX_VALUE;
		for (Entry<Integer,Noeud> entry: noeuds.entrySet()) {
			if (MinX>entry.getValue().getX()) MinX=entry.getValue().getX();
		}
		return MinX;
	}
	
	public int getMaxX() {
		int MaxX=0;
		for (Entry<Integer,Noeud> entry: noeuds.entrySet()) {
			if (MaxX<entry.getValue().getX()) MaxX=entry.getValue().getX();
		}
		return MaxX;
	}
	
	public int getMinY() {
		int MinY=Integer.MAX_VALUE;
		for (Entry<Integer,Noeud> entry: noeuds.entrySet()) {
			if (MinY>entry.getValue().getY()) MinY=entry.getValue().getY();
		}
		return MinY;
	}
	
	public int getMaxY() {
		int MaxY=0;
		for (Entry<Integer,Noeud> entry: noeuds.entrySet()) {
			if (MaxY<entry.getValue().getY()) MaxY=entry.getValue().getY();
		}
		return MaxY;
	}


	
	

}
