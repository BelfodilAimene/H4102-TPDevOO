package application;

import java.util.ArrayList;
import java.util.List;

/**
 * Interface commande : une commande peut être executée ou inexecutée (retour) 
 * @author H4102
 *
 */
interface Command {
	/**
	 * execute la commande
	 * @return true si la commande a été bien exécutée
	 */
	boolean execute();
	/**
	 * inexecute la commande
	 * @return true si la commande a été bien inexecutée
	 */
	
	boolean unexecute();
}

/**
 * Commande permettant l'ajout d'une livraison
 * @author H4102 
 *
 */
class AjoutLivraisonCommand implements Command {

	/**
	 * feuille de route associée à la commande d'ajout
	 */
	FeuilleDeRoute feuilleDeRoute;
	/**
	 * noeud avant le noeud de la nouvelle livraison
	 */
	Noeud avant;
	
	/**
	 * noeud de la nouvelle livraison
	 */
	Noeud noeud;

	/**
	 * Prepare la commande d'ajout
	 * @param feuilleDeRoute feuille de route associée à la commande d'ajout
	 * @param avant noeud avant le noeud de la nouvelle livraison
	 * @param noeud noeud de la nouvelle livraison
	 */
	public AjoutLivraisonCommand(FeuilleDeRoute feuilleDeRoute, Noeud avant,
			Noeud noeud) {
		super();
		this.feuilleDeRoute = feuilleDeRoute;
		this.avant = avant;
		this.noeud = noeud;
	}

	@Override
	public boolean execute() {
		return feuilleDeRoute.majItineraireAjoutLivraison(avant, noeud);
	}

	@Override
	public boolean unexecute() {
		return feuilleDeRoute.majItineraireSupressionLivraison(noeud);
	}
}

/**
 * Commande permettant la suppression d'une livraison
 * @author H4102 
 *
 */
class SuppressionLivraisonCommand implements Command {

	
	/**
	 * feuille de route associée à la commande de suppression
	 */
	FeuilleDeRoute feuilleDeRoute;
	
	/**
	 * noeud de la livraison à supprimer
	 */
	
	Noeud noeud;
	/**
	 * noeud qui précéde la livraison a supprimer (utile pour le retour) 
	 */
	Noeud avant = null;

	/**
	 * Prepare la commande de suppression
	 * @param feuilleDeRoute feuille de route associée à la commande de suppression
	 * @param noeud noeud de la livraison à supprimer
	 */
	public SuppressionLivraisonCommand(FeuilleDeRoute feuilleDeRoute,Noeud noeud) {
		super();
		this.feuilleDeRoute = feuilleDeRoute;
		this.noeud = noeud;
	}

	
	@Override
	public boolean execute() {
		int ordre = feuilleDeRoute.getOrdreCheminDeNoeudDepart(noeud);
		avant = feuilleDeRoute.getItineraire().get(ordre - 1).getDepart();
		return feuilleDeRoute.majItineraireSupressionLivraison(noeud);
	}

	@Override
	public boolean unexecute() {
		return feuilleDeRoute.majItineraireAjoutLivraison(avant, noeud);
	}
}

/**
 * Classe permettant l'execution et l'historisation des commandes
 * @author H4012
 *
 */
public class Modificator {
	/**
	 * historique des commandes executées
	 */
	private List<Command> history = new ArrayList<Command>();
	/**
	 * commande dernièrement exécutée
	 */
	private int actuel = -1;

	/**
	 * Construit l'objet modificateur
	 */
	public Modificator() {
	}

	/**
	 * Exécute et historise une commande
	 * @param cmd commande a executée
	 * @return true si la commande à été bien exécuté
	 */
	public boolean storeAndExecute(Command cmd) {
		int l=actuel+1;
		while (l<history.size()) {
			history.remove(l);
		}
		
		if (cmd.execute()) {
			this.history.add(cmd);
			actuel+=1;
			return true;
		}
		return false;
	}
	
	/**
	 * 
	 * @return true si la commande à été bien inexécuté
	 */
	public boolean undo() {
		if (actuel==-1) return false;
		this.history.get(actuel).unexecute();
		actuel--;
		return true;
	}

	public boolean redo() {
		if (actuel==history.size()-1) return false;
		actuel++;
		this.history.get(actuel).execute();
		return true;
	}
	
	public int historySize() {
		return history.size();
	}
}
