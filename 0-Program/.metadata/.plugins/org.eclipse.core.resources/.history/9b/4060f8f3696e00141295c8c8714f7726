package application;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

public class Chemin {
	private Noeud depart;
	private Noeud destination;
	private double cout;
	private ArrayList<Troncon> listeTroncon;
	
	public Noeud getDepart() {
		return depart;
	}
	public Noeud getDestination() {
		return destination;
	}
	public double getCout() {
		return cout;
	}
	
	
	
	public void setCout(double cout) {
		this.cout = cout;
	}
	public ArrayList<Troncon> getListeTroncon() {
		return listeTroncon;
	}
	
	//Constructeur de chemin (le plus court chemin en temps entre deux noeuds)
	public Chemin(Noeud depart, Noeud destination) {
		super();
		this.depart = depart;
		this.destination = destination;
		this.listeTroncon = new ArrayList<>();
		this.cout=Double.MAX_VALUE;
	}
	
	
	//------------------------------------------------------
	public Chemin Djikstra(Zone zone,int depart,int destination) {
		
		Noeud noeudDepart=zone.getNoeuds().get(depart);
		
		ArrayList<Integer> marque=new ArrayList<>();
		HashMap<Integer, Double> labels=new HashMap<>();
		HashMap<Integer, Chemin> chemins=new HashMap<>();
		
		labels.put(depart, (double) 0);
		
		
		
		while (!marque.contains(destination)) {
			int idNoeudMarque=-1; //Noeud à Marque
			double min=Double.MAX_VALUE;
			
			for (Entry<Integer,Double> E : labels.entrySet()) {
				if (!marque.contains(E.getKey())) {
					if (E.getValue()<=min) {
						idNoeudMarque=E.getKey();
						min=E.getValue();
					}
				}
			}
			marque.add(idNoeudMarque);
			Noeud noeudMarque=zone.getNoeuds().get(idNoeudMarque);
			
			
			for (Troncon troncon : noeudMarque.getListeTronconSortants()) {
				double cout;
				Noeud nouedSucc=troncon.getDestination();
				int succ=nouedSucc.getId();
				
				
				if (labels.containsKey(succ)) {
					cout=labels.get(succ);
				}
				else {
					cout = Double.MAX_VALUE;
				}
				
				if (labels.get(idNoeudMarque)+troncon.getCout()<=cout) {
					cout=labels.get(idNoeudMarque)+troncon.getCout();
					labels.put(succ, cout);
					
					if (chemins.containsKey(idNoeudMarque)) {
						Chemin chemin=new Chemin(noeudDepart,nouedSucc);
						chemin.setCout(cout);
						chemins.get(succ).getListeTroncon().add(troncon);
						chemins.get(succ).setCout(cout);
					}
					else {
						Chemin chemin=new Chemin(noeudDepart,nouedSucc);
						chemin.setCout(cout);
						chemin.getListeTroncon().add(troncon);
						chemins.put(succ, chemin);	
					}
				}
			}
			
		}
		return chemins.get(destination);
	}
	
	
	
	
	
	
}
